#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("@file-services/node");
const build_stylable_1 = require("./build-stylable");
const resolve_options_1 = require("./config/resolve-options");
const logger_1 = require("./logger");
async function main() {
    const argv = (0, resolve_options_1.getCliArguments)();
    const { resolve } = node_1.nodeFs;
    const { watch, require: requires, log: shouldLog, namespaceResolver, preserveWatchOutput, config, } = argv;
    const rootDir = resolve(argv.rootDir);
    const { resolveNamespace } = require(require.resolve(namespaceResolver, {
        paths: [rootDir],
    }));
    //
    const log = (0, logger_1.createLogger)((level, ...messages) => {
        if (shouldLog || level === 'info') {
            const currentTime = new Date().toLocaleTimeString();
            console.log('[Stylable]', `[${currentTime}]`, ...messages);
        }
    }, () => !shouldLog && !preserveWatchOutput && console.clear());
    // execute all require hooks before running the CLI build
    for (const request of requires) {
        require(request);
    }
    const defaultOptions = (0, resolve_options_1.createDefaultOptions)();
    const overrideBuildOptions = (0, resolve_options_1.resolveCliOptions)(argv, defaultOptions);
    const { watchHandler } = await (0, build_stylable_1.buildStylable)(rootDir, {
        overrideBuildOptions,
        defaultOptions,
        fs: node_1.nodeFs,
        resolveNamespace,
        watch,
        log,
        configFilePath: config,
    });
    process.on('SIGTERM', () => {
        void watchHandler.stop();
    });
    process.on('SIGINT', () => {
        void watchHandler.stop();
    });
}
main().catch((e) => {
    process.exitCode = 1;
    console.error(e);
});
//# sourceMappingURL=cli.js.map