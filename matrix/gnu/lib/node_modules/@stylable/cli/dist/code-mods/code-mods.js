"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeMods = void 0;
const node_1 = require("@stylable/node");
const apply_code_mods_1 = require("./apply-code-mods");
const path_1 = require("path");
function codeMods({ fs, rootDir, extension, mods, log }) {
    if (mods.size === 0) {
        return log('No codemods to apply provided. Bail execution.');
    }
    const { result: files } = (0, node_1.findFiles)(fs, path_1.join, path_1.relative, rootDir, extension, new Set(['node_modules', '.git']));
    if (files.size === 0) {
        return log('No stylable files found.');
    }
    log(`Transforming ${files.size} stylable files.`);
    const failed = [];
    const skipped = [];
    const finished = [];
    for (const filePath of files) {
        const source = fs.readFileSync(filePath).toString();
        const result = (0, apply_code_mods_1.applyCodeMods)(filePath, source, mods);
        if (result.type === 'failure') {
            log(`${filePath}: failed to parse\n${result.error.toString()}`);
            failed.push(result);
        }
        else {
            const { css, reports, modifications } = result;
            if (reports.size) {
                logReports(reports, filePath, log);
                failed.push(result);
            }
            else {
                if (modifications > 0) {
                    fs.writeFileSync(filePath, css);
                    finished.push(result);
                }
                else {
                    skipped.push(result);
                }
            }
        }
    }
    log('Summery:');
    for (const { filePath } of skipped) {
        log(`− ${filePath}`);
    }
    for (const { filePath, modifications } of finished) {
        log(`√ ${filePath} (${modifications} applied codemods)`);
    }
    for (const { filePath } of failed) {
        log(`✗ ${filePath}`);
    }
}
exports.codeMods = codeMods;
function logReports(reports, filePath, log) {
    for (const [name, diagnosticsReports] of reports) {
        for (const report of diagnosticsReports) {
            const error = report.node.error(report.message, { word: report.word });
            log(`[${name}]`, `${filePath}: ${report.message}\n${error.showSourceCode()}`);
        }
    }
}
//# sourceMappingURL=code-mods.js.map