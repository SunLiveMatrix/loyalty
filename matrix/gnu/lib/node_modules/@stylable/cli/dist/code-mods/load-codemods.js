"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadExternalCodemods = exports.loadBuiltInCodemods = exports.registeredMods = void 0;
// Builtin codemods
const st_import_to_at_import_1 = require("./st-import-to-at-import");
const st_global_custom_property_to_at_property_1 = require("./st-global-custom-property-to-at-property");
const namespace_to_st_namespace_1 = require("./namespace-to-st-namespace");
exports.registeredMods = new Map([
    ['st-import-to-at-import', st_import_to_at_import_1.stImportToAtImport],
    ['st-global-custom-property-to-at-property', st_global_custom_property_to_at_property_1.stGlobalCustomPropertyToAtProperty],
    ['namespace-to-st-namespace', namespace_to_st_namespace_1.namespaceToStNamespace],
]);
function loadBuiltInCodemods(mods, loadedMods, log) {
    for (const id of mods) {
        const apply = exports.registeredMods.get(id);
        if (!apply) {
            log(`Unknown mod ${id}`);
        }
        else {
            loadedMods.add({ id, apply });
        }
    }
}
exports.loadBuiltInCodemods = loadBuiltInCodemods;
function loadExternalCodemods(external, rootDir, loadedMods, log) {
    for (const externalMod of external) {
        try {
            const resolved = require.resolve(externalMod, { paths: [rootDir] });
            const codemods = require(resolved).codemods;
            for (const mod of codemods) {
                if (typeof mod.id === 'string' && typeof mod.apply === 'function') {
                    log(`Loaded external codemod ${JSON.stringify(mod.id)}`);
                    loadedMods.add(mod);
                }
                else {
                    throw new Error(`Invalid codemod entry. Codemods must contain a "id" string and "apply" function fields got ${Object.keys(mod)}`);
                }
            }
        }
        catch (e) {
            log(`Failed to load external codemods from: ${externalMod}`);
            log(`Make sure you specify a package request and the resolved module has exports.codemods as iterable`);
            log(`${e instanceof Error ? e.stack : e}`);
        }
    }
}
exports.loadExternalCodemods = loadExternalCodemods;
//# sourceMappingURL=load-codemods.js.map