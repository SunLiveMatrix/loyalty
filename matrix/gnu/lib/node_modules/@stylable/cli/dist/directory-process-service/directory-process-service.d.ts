import type { IFileSystem, IWatchEvent } from '@file-services/types';
export interface DirectoryProcessServiceOptions {
    processFiles?(watcher: DirectoryProcessService, affectedFiles: Set<string>, deletedFiles: Set<string>, changeOrigin?: IWatchEvent): Promise<{
        generatedFiles: Set<string>;
    }> | {
        generatedFiles: Set<string>;
    };
    directoryFilter?(directoryPath: string): boolean;
    fileFilter?(filePath: string): boolean;
    onError?(error: Error): void;
    autoResetInvalidations?: boolean;
    watchMode?: boolean;
    watchOptions?: {
        skipInitialWatch?: boolean;
    };
}
export declare class DirectoryProcessService {
    private fs;
    private options;
    invalidationMap: Map<string, Set<string>>;
    watchedDirectoryFiles: Map<string, Set<string>>;
    constructor(fs: IFileSystem, options?: DirectoryProcessServiceOptions);
    startWatch(): void;
    dispose(): Promise<void>;
    init(directoryPath: string): Promise<Set<string>>;
    private addFileToWatchedDirectory;
    private removeFileFromWatchedDirectory;
    registerInvalidateOnChange(watchedFilePath: string, filePathToInvalidate?: string): void;
    private watchPath;
    handleWatchChange(files: Map<string, IWatchEvent>, originalEvent: IWatchEvent): Promise<{
        hasChanges: boolean;
        generatedFiles: Set<string>;
    }>;
    getAffectedFiles(filePath: string, visited?: Set<string>): Set<string>;
    private watchHandler;
    private filterWatchItems;
}
export declare function createWatchEvent(filePath: string, fs?: IFileSystem): IWatchEvent;
//# sourceMappingURL=directory-process-service.d.ts.map