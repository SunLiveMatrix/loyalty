import * as STImport from './st-import';
import type { StylableMeta } from '../stylable-meta';
import type * as postcss from 'postcss';
export interface ContainerSymbol {
    _kind: 'container';
    name: string;
    alias: string;
    global?: boolean;
    import?: STImport.Imported;
}
export interface ResolvedContainer {
    meta: StylableMeta;
    symbol: ContainerSymbol;
}
export declare const diagnostics: {
    UNEXPECTED_DECL_VALUE: {
        (value: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNKNOWN_DECL_TYPE: {
        (value: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_DECL_TYPE: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    INVALID_CONTAINER_NAME: {
        (value: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNRESOLVED_CONTAINER_NAME: {
        (value: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNKNOWN_IMPORTED_CONTAINER: {
        (name: string, path: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_CONTAINER_NAME_INSIDE_GLOBAL: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNEXPECTED_DEFINITION: {
        (def: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
};
export declare const hooks: import("./feature").FeatureHooks<{
    RESOLVED: Record<string, ResolvedContainer>;
}>;
export declare function get(meta: StylableMeta, name: string): ContainerSymbol | undefined;
export declare function getAll(meta: StylableMeta): Record<string, ContainerSymbol>;
export declare function getDefinition(meta: StylableMeta, name: string): postcss.Declaration | postcss.AtRule | postcss.Rule | undefined;
//# sourceMappingURL=css-contains.d.ts.map