import { SelectorList } from '@tokey/css-selector-parser';
export type CustomSelectorMap = Record<string, SelectorList>;
type UnknownReport = {
    type: 'unknown';
    origin: string;
    unknown: string;
};
type CircularReport = {
    type: 'circular';
    path: readonly string[];
};
export type TransformCustomSelectorReport = UnknownReport | CircularReport;
export declare function transformInlineCustomSelectorMap(customSelectors: CustomSelectorMap, report: (data: TransformCustomSelectorReport) => void): CustomSelectorMap;
/**
 * Takes a list of selectors and a function that returns a selector
 * against a custom selector name.
 *
 * Then search for inline custom selectors (e.g. ":--custom") and
 * replaces them with the retrieved selectors it receives
 */
export declare function transformInlineCustomSelectors(inputSelectors: SelectorList, getCustomSelector: (name: string) => SelectorList | undefined, report: (data: UnknownReport) => void): SelectorList;
export {};
//# sourceMappingURL=custom-selector.d.ts.map