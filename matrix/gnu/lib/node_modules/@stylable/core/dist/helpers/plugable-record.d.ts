declare const type: unique symbol;
export type PlugableRecord = Record<Key, unknown>;
export type Key<T = unknown> = symbol & {
    [type]: T;
};
export type Val<K extends Key> = K[typeof type];
export declare const plugableRecord: {
    key<T>(desc: string): Key<T>;
    set<K extends Key<unknown>>(map: PlugableRecord, key: K, value: Val<K>): void;
    get<K_1 extends Key<unknown>>(map: PlugableRecord, key: K_1): Val<K_1> | undefined;
    getAssure<K_2 extends Key<unknown>>(map: PlugableRecord, key: K_2): Val<K_2>;
    getUnsafe<K_3 extends Key<unknown>>(map: PlugableRecord, key: K_3): Val<K_3>;
};
export {};
//# sourceMappingURL=plugable-record.d.ts.map