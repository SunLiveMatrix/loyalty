"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultResolver = void 0;
// importing the factory directly, as we feed it our own fs, and don't want graceful-fs to be implicitly imported
// this allows @stylable/core to be bundled for browser usage without special custom configuration
const ResolverFactory_js_1 = __importDefault(require("enhanced-resolve/lib/ResolverFactory.js"));
function bundleSafeRequireExtensions() {
    let extensions;
    try {
        // we use eval here to avoid bundling warnings about require.extensions we always has fallback for browsers
        extensions = Object.keys(require('module')._extensions);
    }
    catch (e) {
        extensions = [];
    }
    return extensions.length ? extensions : ['.js', '.json'];
}
const resolverContext = {};
function createDefaultResolver(fileSystem, resolveOptions) {
    const extensions = resolveOptions.extensions && resolveOptions.extensions.length
        ? resolveOptions.extensions
        : bundleSafeRequireExtensions();
    const eResolver = ResolverFactory_js_1.default.createResolver({
        ...resolveOptions,
        extensions,
        useSyncFileSystemCalls: true,
        cache: false,
        fileSystem,
    });
    return (directoryPath, request) => {
        const res = eResolver.resolveSync(resolverContext, directoryPath, request);
        if (res === false) {
            throw new Error(`Stylable does not support browser field 'false' values. ${request} resolved to 'false' from ${directoryPath}`);
        }
        return res;
    };
}
exports.createDefaultResolver = createDefaultResolver;
//# sourceMappingURL=module-resolver.js.map