"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssParse = exports.safeParse = exports.cssObjectToAst = void 0;
const postcss_1 = __importStar(require("postcss"));
Object.defineProperty(exports, "cssParse", { enumerable: true, get: function () { return postcss_1.parse; } });
const postcss_nested_1 = __importDefault(require("postcss-nested"));
const postcss_js_1 = __importDefault(require("postcss-js"));
const postcss_safe_parser_1 = __importDefault(require("postcss-safe-parser"));
const processor = (0, postcss_1.default)([(0, postcss_nested_1.default)()]);
function cssObjectToAst(cssObject, sourceFile = '') {
    const r = processor.process(cssObject, { from: sourceFile, parser: postcss_js_1.default });
    return r.root.type === 'document' ? r.root.nodes[0] : r.root;
}
exports.cssObjectToAst = cssObjectToAst;
function safeParse(css, options = { from: 'style.st.css' }) {
    return (0, postcss_safe_parser_1.default)(css, options);
}
exports.safeParse = safeParse;
//# sourceMappingURL=parser.js.map