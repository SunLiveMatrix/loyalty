import type * as postcss from 'postcss';
import type { Diagnostics } from './diagnostics';
import type { SelectorList } from '@tokey/css-selector-parser';
import type { PlugableRecord } from './helpers/plugable-record';
import type { StylableExports } from './stylable-transformer';
import { STImport, STVar, CSSClass, CSSType, CSSCustomProperty, CSSKeyframes, CSSLayer, CSSContains } from './features';
import type { FeatureFlags } from './features/feature';
export declare class StylableMeta {
    sourceAst: postcss.Root;
    diagnostics: Diagnostics;
    flags: FeatureFlags;
    exports?: StylableExports;
    data: PlugableRecord;
    root: string;
    source: string;
    type: 'stylable' | 'css';
    namespace: string;
    urls: string[];
    transformCssDepth: {
        cssDepth: number;
        deepDependencies: Set<string>;
    } | undefined;
    transformDiagnostics: Diagnostics | null;
    transformedScopes: Record<string, SelectorList> | null;
    /** @deprecated */
    scopes: postcss.AtRule[];
    targetAst?: postcss.Root;
    globals: Record<string, boolean>;
    constructor(sourceAst: postcss.Root, diagnostics: Diagnostics, flags: FeatureFlags);
    getSymbol(name: string): (STImport.ImportSymbol | STVar.VarSymbol | CSSClass.ClassSymbol | CSSType.ElementSymbol | CSSCustomProperty.CSSVarSymbol | CSSKeyframes.KeyframesSymbol | CSSLayer.LayerSymbol | CSSContains.ContainerSymbol) | undefined;
    getAllSymbols(): Record<string, STImport.ImportSymbol | STVar.VarSymbol | CSSClass.ClassSymbol | CSSType.ElementSymbol | CSSCustomProperty.CSSVarSymbol>;
    getClass(name: string): CSSClass.ClassSymbol | undefined;
    getAllClasses(): Record<string, CSSClass.ClassSymbol>;
    getTypeElement(name: string): CSSType.ElementSymbol | undefined;
    getAllTypeElements(): Record<string, CSSType.ElementSymbol>;
    getImportStatements(): readonly STImport.Imported[];
    getStVar(name: string): STVar.VarSymbol | undefined;
    getAllStVars(): Record<string, STVar.VarSymbol>;
}
//# sourceMappingURL=stylable-meta.d.ts.map