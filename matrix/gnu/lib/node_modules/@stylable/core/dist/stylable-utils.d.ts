import * as postcss from 'postcss';
import { Diagnostics } from './diagnostics';
import type { ImportSymbol, StylableSymbol } from './features';
export declare function isValidDeclaration(decl: postcss.Declaration): boolean;
export declare const utilDiagnostics: {
    INVALID_MERGE_OF: {
        (mergeValue: string): import("./diagnostics").DiagnosticBase;
        code: string;
        severity: import("./diagnostics").DiagnosticSeverity;
    };
    INVALID_RECURSIVE_MIXIN: {
        (): import("./diagnostics").DiagnosticBase;
        code: string;
        severity: import("./diagnostics").DiagnosticSeverity;
    };
};
export declare function mergeRules(mixinAst: postcss.Root, rule: postcss.Rule, mixinDecl: postcss.Declaration, report: Diagnostics, useNestingAsAnchor: boolean): postcss.Rule;
export declare const sourcePathDiagnostics: {
    MISSING_SOURCE_FILENAME: {
        (): import("./diagnostics").DiagnosticBase;
        code: string;
        severity: import("./diagnostics").DiagnosticSeverity;
    };
};
export declare function getSourcePath(root: postcss.Root, diagnostics: Diagnostics): string;
export declare function getAlias(symbol: StylableSymbol): ImportSymbol | undefined;
//# sourceMappingURL=stylable-utils.d.ts.map