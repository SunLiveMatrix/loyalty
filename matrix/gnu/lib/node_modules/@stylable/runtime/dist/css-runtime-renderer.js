"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$ = exports.RuntimeRenderer = void 0;
const cached_node_renderer_1 = require("./cached-node-renderer");
const keyed_list_renderer_1 = require("./keyed-list-renderer");
class RuntimeRenderer {
    constructor() {
        this.styles = [];
        this.stylesMap = {};
        this.renderer = null;
        this.window = null;
        this.id = null;
        this.update = () => {
            if (this.renderer) {
                this.renderer.render(this.window.document.head, this.styles);
            }
        };
    }
    init(_window) {
        if (this.window || !_window) {
            return;
        }
        _window.__stylable_renderer_global_counter =
            _window.__stylable_renderer_global_counter || 0;
        this.id = _window.__stylable_renderer_global_counter++;
        this.window = _window;
        this.renderer = (0, keyed_list_renderer_1.createDOMListRenderer)(new cached_node_renderer_1.CacheStyleNodeRenderer({
            attrKey: 'st-id' + (this.id ? '-' + this.id : ''),
            createElement: _window.document.createElement.bind(_window.document),
        }));
        this.update();
    }
    onRegister() {
        if (this.window) {
            this.window.requestAnimationFrame(this.update);
        }
    }
    register(stylesheet) {
        const registered = this.stylesMap[stylesheet.$id];
        if (registered) {
            this.removeStyle(registered);
        }
        const i = this.findDepthIndex(stylesheet.$depth);
        this.styles.splice(i + 1, 0, stylesheet);
        this.stylesMap[stylesheet.$id] = stylesheet;
        this.onRegister();
    }
    removeStyle(stylesheet) {
        const i = this.styles.indexOf(stylesheet);
        if (~i) {
            this.styles.splice(i, 1);
        }
        delete this.stylesMap[stylesheet.$id];
    }
    findDepthIndex(depth) {
        let index = this.styles.length;
        while (index--) {
            const stylesheet = this.styles[index];
            if (stylesheet.$depth <= depth) {
                return index;
            }
        }
        return index;
    }
    getStyles(ids, sortIndexes) {
        return this.sortStyles(ids.map((id) => this.stylesMap[id]), sortIndexes);
    }
    sortStyles(styles, sortIndexes = false) {
        const s = styles.slice();
        if (sortIndexes) {
            s.sort((a, b) => {
                return this.styles.indexOf(a) - this.styles.indexOf(b);
            });
        }
        s.sort((a, b) => {
            return a.$depth - b.$depth;
        });
        return s;
    }
}
exports.RuntimeRenderer = RuntimeRenderer;
// The $ export is a convention with the webpack plugin if changed both needs a change
exports.$ = new RuntimeRenderer();
//# sourceMappingURL=css-runtime-renderer.js.map