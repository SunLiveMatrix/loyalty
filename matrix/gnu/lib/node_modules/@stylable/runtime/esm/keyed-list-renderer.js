export function createDOMListRenderer(nodeRenderer) {
    let first;
    const nodes = {};
    const setNode = (dataItem, node) => (nodes[nodeRenderer.renderKey(dataItem)] = node);
    const renderNode = (dataItem) => {
        const key = nodeRenderer.renderKey(dataItem);
        const node = nodes[key];
        return node
            ? nodeRenderer.update(dataItem, node)
            : setNode(dataItem, nodeRenderer.create(dataItem, key));
    };
    const render = (container, data = []) => {
        if (data.length) {
            let node;
            let next = first;
            for (let i = 0; i < data.length; i++) {
                node = renderNode(data[i]);
                if (node !== next) {
                    container.insertBefore(node, next || null);
                }
                else {
                    next = node.nextElementSibling;
                }
            }
            first = nodes[nodeRenderer.renderKey(data[0])];
            while (node.nextElementSibling) {
                if (nodeRenderer.hasKey(node.nextElementSibling)) {
                    container.removeChild(node.nextElementSibling);
                }
                else {
                    break;
                }
            }
        }
        else {
            while (first) {
                const next = first.nextElementSibling;
                container.removeChild(first);
                first = next && nodeRenderer.hasKey(next) ? next : undefined;
            }
        }
    };
    return { render, nodes };
}
//# sourceMappingURL=keyed-list-renderer.js.map