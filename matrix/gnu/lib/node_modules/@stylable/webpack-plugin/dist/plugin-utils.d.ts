import type { Chunk, ChunkGraph, Compilation, Compiler, dependencies, Module, ModuleGraph, NormalModule } from 'webpack';
import type { BuildData, DependencyTemplates, EntryPoint, RuntimeTemplate, StringSortableSet, StylableBuildMeta, WebpackCreateHash, WebpackOutputOptions } from './types';
import type { IStylableOptimizer, StylableResolverCache } from '@stylable/core/dist/index-internal';
import { CalcDepthContext } from '@stylable/build-tools';
export declare function uniqueFilterMap<T, O = T>(iter: Iterable<T>, map?: (item: T) => O, filter?: (item: O) => item is NonNullable<O>): Generator<NonNullable<O>, void, unknown>;
export declare function isSameResourceModule(moduleA: any, moduleB: any): boolean;
export declare function isStylableModule(module: any): module is NormalModule;
export declare function isLoadedNativeCSSModule(module: any, moduleGraph: ModuleGraph): module is NormalModule;
export declare function isAssetModule(module: Module): module is NormalModule;
export declare function getStaticPublicPath(compilation: Compilation): string;
export declare function replaceCSSAssetPlaceholders({ css, urls }: BuildData, publicPath: string, getAssetOutputPath: (resourcePath: string, publicPath: string) => string): string;
interface ReplaceMappedCSSAssetPlaceholdersOptions {
    stylableBuildData: BuildData;
    staticPublicPath: string;
    assetsModules: Map<string, NormalModule>;
    chunkGraph: ChunkGraph;
    moduleGraph: ModuleGraph;
    runtime?: string | StringSortableSet;
    runtimeTemplate: RuntimeTemplate;
    dependencyTemplates: DependencyTemplates;
}
export declare function replaceMappedCSSAssetPlaceholders({ stylableBuildData, staticPublicPath, assetsModules, chunkGraph, moduleGraph, runtime, runtimeTemplate, dependencyTemplates, }: ReplaceMappedCSSAssetPlaceholdersOptions): string;
export declare function extractFilenameFromAssetModule(module: NormalModule, publicPath: string): string;
export declare function extractDataUrlFromAssetModuleSource(source: string): string;
type AssetNormalModule = NormalModule & {
    loaders: [{
        loader: 'file-loader' | 'url-loader';
    }];
};
export declare function isLoadedWithKnownAssetLoader(module: Module): module is AssetNormalModule;
export declare function outputOptionsAwareHashContent(createHash: WebpackCreateHash, outputOptions: WebpackOutputOptions, content: string): string;
export declare const LOADER_NAME = "stylable-plugin-loader";
export declare function injectLoader(compiler: Compiler): void;
export declare function createDecacheRequire(compiler: Compiler): (id: string) => any;
export declare function createStylableResolverCacheMap(compiler: Compiler): StylableResolverCache;
export declare function staticCSSWith(staticPublicPath: string, assetsModules: Map<string, NormalModule>, chunkGraph: ChunkGraph, moduleGraph: ModuleGraph, runtime: string, runtimeTemplate: RuntimeTemplate, dependencyTemplates: DependencyTemplates): (stylableModules: Map<Module, BuildData | null>) => string[];
export declare function createStaticCSS(staticPublicPath: string, stylableModules: Map<Module, BuildData | null>, assetsModules: Map<string, NormalModule>, chunkGraph: ChunkGraph, moduleGraph: ModuleGraph, runtime: string, runtimeTemplate: RuntimeTemplate, dependencyTemplates: DependencyTemplates): string[];
export declare function getWebpackBuildMeta(module: Module): NonNullable<Module['buildMeta']>;
export declare function getStylableBuildMeta(module: Module): StylableBuildMeta;
export declare function getStylableBuildData(stylableModules: Map<Module, BuildData | null>, module: Module): BuildData;
export declare function findIfStylableModuleUsed(m: Module, compilation: Compilation, UnusedDependency: typeof dependencies.HarmonyImportDependency): boolean;
export declare function getFileName(filename: string, data: Record<string, string | undefined>): string;
/**
 * sorts by depth, falling back to alpha numeric
 */
export declare function getSortedModules(stylableModules: Map<NormalModule, BuildData | null>): NormalModule[];
export declare function reportNamespaceCollision(namespaceToFileMapping: Map<string, Set<NormalModule>>, compilation: Compilation, mode: 'ignore' | 'warnings' | 'errors'): void;
export declare function normalizeNamespaceCollisionOption(opt?: boolean | 'warn'): "ignore" | "warnings" | "errors";
export interface OptimizationMapping {
    usageMapping: Record<string, boolean>;
    namespaceMapping: Record<string, string>;
    potentialNamespaceCollision: Map<string, Set<NormalModule>>;
}
export declare function createOptimizationMapping(sortedModules: NormalModule[], optimizer: IStylableOptimizer): OptimizationMapping;
export declare function getTopLevelInputFilesystem(compiler: Compiler): any;
export declare function createCalcDepthContext(moduleGraph: ModuleGraph): CalcDepthContext<Module>;
export declare function getCSSViewModuleWebpack(moduleGraph: ModuleGraph): (module: Module) => NormalModule | undefined;
/**
 * Provide a simple way to share build meta with other plugins without using module state like WeakMap<Compilation, DATA>
 */
export declare function provideStylableModules(compilation: Compilation, stylableModules: Map<NormalModule, BuildData | null>): void;
export declare function getStylableModules(compilation: Compilation): Map<NormalModule, BuildData | null> | undefined;
export declare function getOnlyChunk(compilation: Compilation): Chunk | undefined;
export declare function emitCSSFile(compilation: Compilation, cssSource: string, filenameTemplate: string, createHash: WebpackCreateHash, chunk?: Chunk): string;
export declare function getEntryPointModules(entryPoint: EntryPoint, chunkGraph: ChunkGraph, onModule: (module: Module) => void): void;
export declare function isDependencyOf(entryPoint: EntryPoint, entrypoints: Iterable<EntryPoint>): boolean;
export {};
//# sourceMappingURL=plugin-utils.d.ts.map