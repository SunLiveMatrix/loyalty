import { Stylable, StylableConfig } from '@stylable/core';
import { OptimizeConfig, DiagnosticsMode, IStylableOptimizer } from '@stylable/core/dist/index-internal';
import type { Compiler } from 'webpack';
import { StylableWebpackEntities } from './webpack-entities';
import { STCBuilder } from '@stylable/cli';
type OptimizeOptions = OptimizeConfig & {
    minify?: boolean;
};
export interface StylableWebpackPluginOptions {
    /**
     * Filename of the output bundle when emitting css bundle
     * supports
     * - [contenthash] replacer - "stylable.[contenthash].css" - based on file content hash
     * - [name] replacer - "[name].css" - based on entry name - is not supported in "extractMode: 'single'" with multiple entries
     */
    filename?: string;
    /**
     * Determine the way css is injected to the document
     * js - every js module contains the css and inject it independently
     * css - emit bundled css asset to injected via link
     * mini-css - inject css modules via webpack mini-css-extract-plugin (can support dynamic splitting but order is not deterministic)
     * none - will not generate any output css (usually good for ssr bundles)
     */
    cssInjection?: 'js' | 'css' | 'mini-css' | 'none';
    /**
     * Determine the runtime stylesheet id kind used by the cssInjection js mode
     * This sets the value of the st_id attribute on the stylesheet element
     * default for dev - 'module'
     * default for prod - 'namespace'
     */
    runtimeStylesheetId?: 'module' | 'namespace';
    /**
     * Config how error and warning reported to webpack by stylable
     * auto - Stylable warning will emit Webpack warning and Stylable error will emit Webpack error
     * strict - Stylable error and warning will emit Webpack error
     * loose - Stylable error and warning will emit Webpack warning
     */
    diagnosticsMode?: DiagnosticsMode;
    /**
     * Target of the js module
     * oldie - ES3 compatible
     * modern - ES2105 compatible
     */
    target?: 'oldie' | 'modern';
    /**
     * Set the <style> tag st_runtime attribute to allow multiple Stylable build to be separated in the head
     * This only apply to cssInjection js mode
     */
    runtimeId?: string;
    /**
     * Optimization options
     */
    optimize?: OptimizeOptions;
    /**
     * Provide custom StylableOptimizer
     */
    optimizer?: IStylableOptimizer;
    /**
     * A function to override Stylable instance default configuration options
     */
    stylableConfig?: (config: StylableConfig, compiler: Compiler) => StylableConfig;
    /**
     * Allow to disable specific diagnostics reports
     */
    unsafeMuteDiagnostics?: {
        DUPLICATE_MODULE_NAMESPACE?: boolean | 'warn';
    };
    /**
     * Runs "stc" programmatically with the webpack compilation.
     * true - it will automatically detect the closest "stylable.config.js" file and use it.
     * string - it will use the provided string as the "stcConfig" file path.
     */
    stcConfig?: boolean | string;
    /**
     * Set the strategy of how to spit the extracted css
     * This option is only used when cssInjection is set to 'css'
     * single - extract all css to a single file
     * entries - extract file per entry which does not depend on another entry
     */
    extractMode?: 'single' | 'entries';
    /**
     * Allow filter for url asset processing.
     * Filtered asset will not be processed and remain untouched.
     */
    assetFilter?: (url: string, context: string) => boolean;
    /**
     * @deprecated webpack 5 recommendation is to use AssetsModules for loading assets
     */
    assetsMode?: 'url' | 'loader';
    /**
     * The strategy used to calculate stylesheet override depth
     * 'css+js' - use css and js files to calculate depth
     * 'css' - use only css files to calculate depth
     */
    depthStrategy?: 'css+js' | 'css';
    /**
     * Improved side-effect detection to include stylesheets with deep global side-effects.
     * Defaults to true.
     */
    includeGlobalSideEffects?: boolean;
    /**
     * Experimental flag that attaches CSS bundle asset to every chunk that contains references to stylable stylesheets.
     * The default off mode attaches only to entry chunks.
     */
    experimentalAttachCssToContainingChunks?: boolean;
}
export declare class StylableWebpackPlugin {
    private userOptions;
    private injectConfigHooks;
    stylable: Stylable;
    options: Required<StylableWebpackPluginOptions>;
    entities: StylableWebpackEntities;
    stcBuilder: STCBuilder | undefined;
    constructor(userOptions?: StylableWebpackPluginOptions, injectConfigHooks?: boolean);
    apply(compiler: Compiler): void;
    private processOptions;
    private getStylableConfig;
    private createStcBuilder;
    private createStylable;
    private modulesIntegration;
    private chunksIntegration;
    private setupDependencies;
}
export {};
//# sourceMappingURL=plugin.d.ts.map