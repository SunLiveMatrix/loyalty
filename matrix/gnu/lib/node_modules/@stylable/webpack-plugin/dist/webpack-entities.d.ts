import type { Compiler, Compilation, Module, ModuleGraph, NormalModule, ChunkGraph, RuntimeModule, Dependency, dependencies } from 'webpack';
import type { BuildData, DependencyTemplates, RuntimeTemplate, StringSortableSet, StylableBuildMeta } from './types';
export interface DependencyTemplateContext {
    module: Module;
    moduleGraph: ModuleGraph;
    runtimeRequirements: Set<string>;
    runtimeTemplate: RuntimeTemplate;
    runtime?: string | StringSortableSet;
    chunkGraph: ChunkGraph;
    dependencyTemplates: DependencyTemplates;
}
type DependencyTemplate = InstanceType<(typeof dependencies.ModuleDependency)['Template']>;
interface InjectDependencyTemplate {
    new (staticPublicPath: string, stylableModules: Map<Module, BuildData | null>, assetsModules: Map<string, NormalModule>, runtimeStylesheetId: 'namespace' | 'module', runtimeId: string, cssInjection: 'js' | 'css' | 'mini-css' | 'none'): DependencyTemplate;
}
interface StylableRuntimeDependency {
    new (stylableBuildMeta: StylableBuildMeta): Dependency;
}
export interface StylableWebpackEntities {
    injectRuntimeModules: (name: string, compilation: Compilation) => void;
    StylableRuntimeInject: typeof RuntimeModule;
    InjectDependencyTemplate: InjectDependencyTemplate;
    StylableRuntimeDependency: StylableRuntimeDependency;
    StylableRuntimeStylesheet: typeof RuntimeModule;
    CSSURLDependency: typeof dependencies.ModuleDependency;
    NoopTemplate: typeof dependencies.ModuleDependency.Template;
    UnusedDependency: typeof dependencies.HarmonyImportDependency;
}
export declare function getWebpackEntities(webpack: Compiler['webpack']): StylableWebpackEntities;
export {};
//# sourceMappingURL=webpack-entities.d.ts.map