import type { Token } from './types';
export interface TokyOptions<T extends Token<unknown>> {
    shouldAddToken(type: T['type'], value: string): boolean;
    isStringDelimiter(char: string, previousChar: string): boolean;
    isDelimiter(char: string, previousChar: string): boolean;
    isWhitespace(char: string): boolean;
    getCommentStartType(ch: string, source: string, nextCharIndex: number): string;
    isCommentEnd(inComment: string, ch: string, source: string, nextCharIndex: number, previousChar: string): boolean;
    getUnclosedComment(inComment: string): string;
    createToken(value: string, type: T['type'], start: number, end: number): T;
    shouldClose?(ch: string, previousChar: string): boolean;
    offset?: number;
}
export declare function tokenize<T extends Token<unknown>>(source: string, { shouldClose, isDelimiter, isStringDelimiter, isWhitespace, shouldAddToken, createToken, getCommentStartType, isCommentEnd, getUnclosedComment, offset, }: TokyOptions<T>): T[];
//# sourceMappingURL=core.d.ts.map