import type { Token } from './types';
/**
 * Minimal token traverse helper used to create structure from tokens
 */
export declare class Seeker<T extends Token<unknown>> {
    tokens: T[];
    index: number;
    constructor(tokens: T[]);
    next(): T;
    back(): void;
    peekBack(): T;
    peek(num?: number): T;
    take(type: T['type']): T | undefined;
    eat(type: T['type']): this;
    takeMany(type: T['type']): T[];
    flatBlock(start: string, end: string, isEndError?: (token: Token<any>) => boolean): T[] | undefined;
    done(): boolean;
    run<A>(handleToken: (token: T, ast: A, source: string, seeker: this) => void | boolean, ast: A, source: string): A;
}
//# sourceMappingURL=seeker.d.ts.map