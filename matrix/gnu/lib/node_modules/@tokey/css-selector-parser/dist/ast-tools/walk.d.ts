import type { SelectorNode, SelectorList, ImmutableSelectorNode, ImmutableSelectorList } from '../ast-types';
export interface WalkOptions {
    visitList?: SelectorNode['type'][];
    ignoreList?: SelectorNode['type'][];
}
export type WalkVisitor<AST extends SelectorNode | ImmutableSelectorNode> = (node: AST, index: number, nodes: AST[], parents: AST[]) => number | undefined | void;
/**
 * traverse each node of the selector AST from start to end.
 * to control traversal return:
 *  walk.skipNested
 *  walk.skipCurrentSelector
 *  walk.stopAll
 *
 * @param topNode the top AST to traverse down from
 * @param visit function to call for each traversed element
 * @param options provide visitList/ignoreList for traversal
 */
export declare function walk<AST extends SelectorNode | SelectorList>(topNode: AST, visit: WalkVisitor<SelectorNode>, options?: WalkOptions): void;
export declare function walk<AST extends ImmutableSelectorNode | ImmutableSelectorList>(topNode: AST, visit: WalkVisitor<ImmutableSelectorNode>, options?: WalkOptions): void;
export declare namespace walk {
    var skipNested: 0;
    var skipCurrentSelector: 1;
    var stopAll: number;
}
//# sourceMappingURL=walk.d.ts.map