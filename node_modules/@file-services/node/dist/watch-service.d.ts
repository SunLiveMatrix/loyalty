import type { IWatchService, WatchEventListener } from '@file-services/types';
export interface INodeWatchServiceOptions {
    /**
     * Should fs watchers be persistent and keep the process open
     * (until someone calls `unwatchAllPaths()`)
     *
     * @default true
     */
    persistent?: boolean;
    /**
     * How much time (in ms) to wait for next native watch event before
     * emitting a service watch event
     *
     * @default 200
     */
    debounceWait?: number;
}
export declare class NodeWatchService implements IWatchService {
    /** user's subsribed global listeners */
    private globalListeners;
    /** resolved options (default + user) */
    private options;
    /** all watched paths (including files inside watched directories) */
    private watchedPaths;
    /** path to actual FSWatcher instance opened for it */
    private fsWatchers;
    /** path to its pending event (debounced watch event) */
    private pendingEvents;
    /**
     * Construct a new Node file system watch service
     */
    constructor(options?: INodeWatchServiceOptions);
    watchPath(path: string, listener?: WatchEventListener): Promise<void>;
    unwatchPath(path: string, listener?: WatchEventListener): Promise<void>;
    unwatchAllPaths(): Promise<void>;
    addGlobalListener(listener: WatchEventListener): void;
    removeGlobalListener(listener: WatchEventListener): void;
    clearGlobalListeners(): void;
    /**
     * Debounces watch events while retaining whether one of
     * them was a 'rename' event
     */
    private onPathEvent;
    private emitEvent;
    private ensureFsWatcher;
    private onWatchError;
    private onDirectoryEvent;
    private statSafe;
}
//# sourceMappingURL=watch-service.d.ts.map