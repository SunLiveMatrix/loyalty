import type { IFileSystem } from '@file-services/types';
import type { Stylable } from '@stylable/core';
import { Log } from './logger';
export interface ReExports {
    root: string;
    classes: Record<string, string>;
    keyframes: Record<string, string>;
    vars: Record<string, string>;
    stVars: Record<string, string>;
}
export interface IndexGeneratorParameters {
    indexFileTargetPath: string;
    stylable: Stylable;
    log?: Log;
    fs?: Pick<IFileSystem, 'dirname' | 'relative' | 'basename'>;
}
export declare class IndexGenerator {
    private indexFileOutput;
    private collisionDetector;
    private log;
    indexFileTargetPath: string;
    stylable: Stylable;
    fs: NonNullable<IndexGeneratorParameters['fs']>;
    constructor({ log, stylable, indexFileTargetPath, fs }: IndexGeneratorParameters);
    generateReExports(filePath: string): ReExports | undefined;
    generateFileIndexEntry(filePath: string): void;
    removeEntryFromIndex(filePath: string): void;
    generateIndexFile(fs: IFileSystem): Promise<void>;
    filename2varname(filePath: string): string;
    protected generateIndexSource(): string;
    private checkForCollisions;
}
export declare function reExportsAllSymbols(filePath: string, generator: IndexGenerator): ReExports;
//# sourceMappingURL=base-generator.d.ts.map