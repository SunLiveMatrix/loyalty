import { type Stylable, type StylableResults } from '@stylable/core';
import type { IFileSystem } from '@file-services/types';
import type { Log } from './logger';
import { DiagnosticsManager, DiagnosticsMode } from './diagnostics-manager';
import type { CLIDiagnostic } from './report-diagnostics';
import type { ModuleFormats } from './types';
export interface BuildCommonOptions {
    fullOutDir: string;
    filePath: string;
    fullSrcDir: string;
    log: Log;
    fs: IFileSystem;
    moduleFormats: ModuleFormats;
    outputCSS?: boolean;
    outputCSSNameTemplate?: string;
    outputSources?: boolean;
    generated?: Set<string>;
    mode?: string;
    dts?: boolean;
    dtsSourceMap?: boolean;
    diagnosticsMode?: DiagnosticsMode;
}
export interface BuildFileOptions extends BuildCommonOptions {
    resolveRuntimeRequest: (targetFilePath: string, moduleFormat: 'esm' | 'cjs') => string;
    identifier?: string;
    stylable: Stylable;
    diagnosticsManager: DiagnosticsManager;
    projectAssets: Set<string>;
    includeCSSInJS?: boolean;
    useNamespaceReference?: boolean;
    injectCSSRequest?: boolean;
    optimize?: boolean;
    minify?: boolean;
}
export declare function buildSingleFile({ fullOutDir, filePath, fullSrcDir, identifier, log, fs, moduleFormats, outputCSS, outputCSSNameTemplate, outputSources, generated, mode, stylable, includeCSSInJS, projectAssets, useNamespaceReference, injectCSSRequest, optimize, minify, dts, dtsSourceMap, diagnosticsMode, resolveRuntimeRequest, diagnosticsManager, }: BuildFileOptions): {
    targetFilePath: string;
};
export declare function buildDTS({ res, targetFilePath, generated, outputLogs, dtsSourceMap, sourceFilePath, writeFileSync, relative, dirname, isAbsolute, }: {
    res: StylableResults;
    targetFilePath: string;
    generated: Set<string>;
    outputLogs: string[];
    dtsSourceMap: boolean | undefined;
    sourceFilePath: string | undefined;
    writeFileSync: (path: string, data: string) => void;
    relative: (from: string, to: string) => string;
    dirname: (p: string) => string;
    isAbsolute: (p: string) => boolean;
}): void;
export declare function removeBuildProducts({ fullOutDir, filePath, fullSrcDir, log, fs, moduleFormats, outputCSS, outputCSSNameTemplate, outputSources, generated, mode, dts, dtsSourceMap, }: BuildCommonOptions): {
    targetFilePath: string;
};
export declare function getAllDiagnostics(res: StylableResults): CLIDiagnostic[];
//# sourceMappingURL=build-single-file.d.ts.map