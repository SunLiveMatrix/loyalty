import { StylableConfig } from '@stylable/core';
import { StylableResolverCache } from '@stylable/core/dist/index-internal';
import { DiagnosticsManager } from './diagnostics-manager';
import type { BuildContext, BuildOptions } from './types';
import { WatchHandler } from './watch-handler';
export interface BuildStylableContext extends Partial<Pick<BuildContext, 'fs' | 'watch' | 'log'>>, Partial<Pick<StylableConfig, 'resolveNamespace' | 'requireModule'>> {
    resolverCache?: StylableResolverCache;
    fileProcessorCache?: StylableConfig['fileProcessorCache'];
    diagnosticsManager?: DiagnosticsManager;
    outputFiles?: Map<string, Set<string>>;
    defaultOptions?: BuildOptions;
    overrideBuildOptions?: Partial<BuildOptions>;
    configFilePath?: string;
    watchOptions?: {
        lazy?: boolean;
    };
}
export declare function buildStylable(rootDir: string, { defaultOptions, overrideBuildOptions, fs: fileSystem, log, watch, resolverCache, fileProcessorCache, diagnosticsManager, outputFiles, requireModule, resolveNamespace, configFilePath, watchOptions, }?: BuildStylableContext): Promise<{
    watchHandler: WatchHandler;
    outputFiles: Map<string, Set<string>>;
    projects: import("./types").STCProjects;
    diagnosticsManager: DiagnosticsManager;
}>;
//# sourceMappingURL=build-stylable.d.ts.map