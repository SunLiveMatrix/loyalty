"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyCodeMods = void 0;
const core_1 = require("@stylable/core");
const postcss_1 = __importStar(require("postcss"));
function applyCodeMods(filePath, css, mods) {
    try {
        const reports = new Map();
        const ast = (0, postcss_1.parse)(css, { from: filePath });
        let modifications = 0;
        for (const { id, apply } of mods) {
            const diagnostics = new core_1.Diagnostics();
            const { changed } = apply({ ast, diagnostics, postcss: postcss_1.default });
            if (changed) {
                modifications++;
            }
            if (diagnostics.reports.length) {
                reports.set(id, diagnostics.reports);
            }
        }
        return {
            filePath,
            type: 'success',
            css: ast.toString(),
            reports,
            modifications,
        };
    }
    catch (error) {
        return {
            filePath,
            type: 'failure',
            error: normalizeError(error),
        };
    }
}
exports.applyCodeMods = applyCodeMods;
function normalizeError(error) {
    return error instanceof postcss_1.CssSyntaxError || error instanceof Error
        ? error
        : new Error(String(error));
}
//# sourceMappingURL=apply-code-mods.js.map