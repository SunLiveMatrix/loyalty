"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveConfig = exports.projectsConfig = void 0;
const build_tools_1 = require("@stylable/build-tools");
const build_tools_2 = require("../build-tools");
const process_projects_1 = require("./process-projects");
const resolve_options_1 = require("./resolve-options");
const resolve_requests_1 = require("./resolve-requests");
async function projectsConfig(rootDir, overrideBuildOptions, defaultOptions = (0, resolve_options_1.createDefaultOptions)(), config) {
    const topLevelOptions = (0, resolve_options_1.mergeBuildOptions)(defaultOptions, config?.stcConfig?.options, overrideBuildOptions);
    (0, resolve_options_1.validateOptions)(topLevelOptions);
    let projects;
    if (isMultipleConfigProject(config)) {
        const { entities } = (0, process_projects_1.processProjects)(config.stcConfig, {
            defaultOptions: topLevelOptions,
        });
        projects = await resolveProjectsRequests({
            rootDir,
            entities,
            resolveRequests: config.stcConfig.projectsOptions?.resolveRequests ?? resolve_requests_1.resolveNpmRequests,
        });
    }
    else {
        projects = [
            {
                projectRoot: rootDir,
                options: [topLevelOptions],
            },
        ];
    }
    return projects;
}
exports.projectsConfig = projectsConfig;
// todo: make fs not optional next major version
function resolveConfig(context, request, fs) {
    return request ? requireConfigFile(request, context, fs) : resolveConfigFile(context, fs);
}
exports.resolveConfig = resolveConfig;
function requireConfigFile(request, context, fs) {
    const path = require.resolve(request, { paths: [context] });
    const config = resolveConfigValue(require(path), fs);
    return config ? { config, path } : undefined;
}
function resolveConfigFile(context, fs) {
    return (0, build_tools_1.loadStylableConfig)(context, (config) => resolveConfigValue(config, fs));
}
function resolveConfigValue(config, fs) {
    return (0, build_tools_2.tryRun)(() => ({
        stcConfig: isSTCConfig(config)
            ? typeof config.stcConfig === 'function'
                ? config.stcConfig()
                : config.stcConfig
            : undefined,
        defaultConfig: typeof config.defaultConfig === 'function' ? config.defaultConfig(fs) : undefined,
    }), 'Failed to evaluate Stylable config');
}
function isSTCConfig(config) {
    return (typeof config === 'object' &&
        config.stcConfig &&
        (typeof config.stcConfig === 'function' || typeof config.stcConfig === 'object'));
}
function isMultipleConfigProject(config) {
    return Boolean(config?.stcConfig?.projects);
}
async function resolveProjectsRequests({ entities, rootDir, resolveRequests, }) {
    const context = { rootDir };
    return resolveRequests(entities, context);
}
//# sourceMappingURL=projects-config.js.map