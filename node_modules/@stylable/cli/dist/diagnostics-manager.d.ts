import { Log } from './logger';
import { CLIDiagnostic, DiagnosticMessages } from './report-diagnostics';
export type DiagnosticsMode = 'strict' | 'loose';
interface ProcessDiagnostics {
    diagnostics: CLIDiagnostic[];
    diagnosticsMode?: DiagnosticsMode | undefined;
}
interface DiagnosticsManagerOptions {
    log?: Log;
    hooks?: {
        preReport?(diagnosticsMessages: DiagnosticMessages): void;
        postReport?(diagnosticsMessages: DiagnosticMessages, hasFatalDiagnostic: boolean): void;
    };
}
export declare class DiagnosticsManager {
    private options;
    private store;
    private log;
    constructor(options?: DiagnosticsManagerOptions);
    clear(): void;
    set(identifier: string, filepath?: string, processDiagnostics?: ProcessDiagnostics): void;
    get(identifier: string): Map<string, ProcessDiagnostics> | undefined;
    get(identifier: string, filepath: string): ProcessDiagnostics | undefined;
    delete(identifier: string, filepath?: string): void;
    report(): boolean;
}
export {};
//# sourceMappingURL=diagnostics-manager.d.ts.map