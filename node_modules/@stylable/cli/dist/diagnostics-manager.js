"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticsManager = void 0;
const logger_1 = require("./logger");
const report_diagnostics_1 = require("./report-diagnostics");
class DiagnosticsManager {
    constructor(options = {}) {
        this.options = options;
        this.store = new Map();
        this.log = this.options.log ?? (0, logger_1.createDefaultLogger)();
    }
    clear() {
        this.store = new Map();
    }
    set(identifier, filepath, processDiagnostics) {
        if (this.store.has(identifier) && filepath && processDiagnostics) {
            this.store.get(identifier).set(filepath, processDiagnostics);
        }
        else {
            this.store.set(identifier, new Map(filepath && processDiagnostics ? [[filepath, processDiagnostics]] : undefined));
        }
    }
    get(identifier, filepath) {
        if (filepath) {
            return this.store.get(identifier)?.get(filepath);
        }
        else {
            return this.store.get(identifier);
        }
    }
    delete(identifier, filepath) {
        if (filepath) {
            this.store.get(identifier)?.delete(filepath);
        }
        else {
            this.store.delete(identifier);
        }
    }
    report() {
        let diagnosticMode = 'loose';
        const diagnosticMessages = new Map();
        const collectedDiagnostics = new Map();
        for (const buildDiagnostics of this.store.values()) {
            for (const [filePath, { diagnostics, diagnosticsMode: currentMode },] of buildDiagnostics) {
                if (diagnosticMode !== 'strict') {
                    diagnosticMode = currentMode || diagnosticMode;
                }
                if (!diagnosticMessages.has(filePath)) {
                    diagnosticMessages.set(filePath, []);
                    collectedDiagnostics.set(filePath, new Map());
                }
                const currentDiagnostics = diagnosticMessages.get(filePath);
                const ids = collectedDiagnostics.get(filePath);
                for (const diagnostic of diagnostics) {
                    const diagnosticId = `${diagnostic.severity};${diagnostic.message}`;
                    if (!ids.has(diagnosticId)) {
                        ids.set(diagnosticId, diagnostic);
                        currentDiagnostics.push(ids.get(diagnosticId));
                    }
                }
            }
        }
        this.options.hooks?.preReport?.(diagnosticMessages);
        if (diagnosticMessages.size) {
            const hasFatalDiagnostics = (0, report_diagnostics_1.reportDiagnostics)(this.log, diagnosticMessages, diagnosticMode);
            this.options.hooks?.postReport?.(diagnosticMessages, hasFatalDiagnostics);
        }
        return Boolean(diagnosticMessages.size);
    }
}
exports.DiagnosticsManager = DiagnosticsManager;
//# sourceMappingURL=diagnostics-manager.js.map