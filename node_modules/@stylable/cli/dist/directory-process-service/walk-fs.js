"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.directoryDeepChildren = void 0;
/**
 * Deeply iterate into a directory's child directories/files.
 * Provides `DirectoryItem` instances for each item, giving parents before leafs.
 *
 * @param directoryPath directory to iterate into.
 * @param basePath base directory to compute relative paths from. defaults to `directoryPath`.
 */
async function* directoryDeepChildren(fs, directoryPath, filterItem = returnsTrue, basePath = directoryPath) {
    for (const item of await fs.promises.readdir(directoryPath, {
        withFileTypes: true,
    })) {
        const itemName = item.name;
        const itemPath = fs.join(directoryPath, itemName);
        const relativePath = fs.relative(basePath, itemPath);
        if (item.isFile()) {
            const fileItem = {
                type: 'file',
                path: itemPath,
                name: itemName,
                relativePath,
            };
            if (filterItem(fileItem)) {
                yield fileItem;
            }
        }
        else if (item.isDirectory()) {
            const directoryItem = {
                type: 'directory',
                path: itemPath,
                name: itemName,
                relativePath,
            };
            if (filterItem(directoryItem)) {
                yield directoryItem;
                yield* directoryDeepChildren(fs, itemPath, filterItem, basePath);
            }
        }
    }
}
exports.directoryDeepChildren = directoryDeepChildren;
function returnsTrue() {
    return true;
}
//# sourceMappingURL=walk-fs.js.map