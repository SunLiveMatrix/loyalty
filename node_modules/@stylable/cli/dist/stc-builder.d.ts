import { Log } from './logger';
import type { IFileSystem } from '@file-services/types';
import { DiagnosticsMode, EmitDiagnosticsContext } from '@stylable/core/dist/index-internal';
export type STCBuilderFileSystem = Pick<IFileSystem, 'existsSync' | 'realpathSync' | 'join'>;
export interface STCBuilderOptions {
    rootDir: string;
    configFilePath?: string;
    log?: Log;
    fs?: STCBuilderFileSystem;
    watchMode?: boolean;
}
export declare class STCBuilder {
    private rootDir;
    private fs;
    private configFilePath?;
    private log?;
    private watchMode?;
    private diagnosticsManager;
    private outputFiles;
    private diagnosticsMessages;
    private watchHandler;
    private projects;
    static create({ rootDir, fs, configFilePath, log, watchMode, }: STCBuilderOptions): STCBuilder;
    private constructor();
    /**
     * Provide the sources files for given output file path.
     * @param outputFilePath {string}
     */
    getSourcesFiles: (outputFilePath: string) => Set<string> | undefined;
    /**
     * Executes a rebuild. It will build all files if "build" was never called or perform a rebuild of provided modified files.
     * Stylable saves information about the files that were built in each execution, then this can be used to rebuild only the relevant files.
     *
     * @param modifiedFiles {Iterable<string>} list of absolute file path that have been modified since the last build execution.
     */
    rebuild: (modifiedFiles?: Iterable<string>) => Promise<void>;
    /**
     * Executes a fresh build of the Stylable project.
     */
    build: () => Promise<void>;
    /**
     * Returns the absolute paths of the source directory that were resolved in the last build execution.
     * @returns {Iterable<string>} list of absolute directory path of the Stylable projects.
     */
    getProjectsSources: () => Iterable<string>;
    /**
     * Reports diagnostics messages aggregated from the last build execution.
     * @param context {EmitDiagnosticsContext}
     * @param diagnosticsMode {DiagnosticsMode}
     */
    reportDiagnostics: (context: EmitDiagnosticsContext, diagnosticsMode: DiagnosticsMode, remove?: boolean) => void;
    /**
     * Reports diagnostics messages for a given file from the last build execution.
     * @param filePath {string}
     * @param context {EmitDiagnosticsContext}
     * @param diagnosticsMode {DiagnosticsMode}
     */
    reportDiagnostic: (filePath: string, context: EmitDiagnosticsContext, diagnosticsMode: DiagnosticsMode, remove?: boolean) => void;
    /**
     * Executes an incremental build of modified files.
     * @param modifiedFiles {Iterable<string>} list of absolute file path that have been modified since the last build execution.
     */
    private rebuildModifiedFiles;
}
//# sourceMappingURL=stc-builder.d.ts.map