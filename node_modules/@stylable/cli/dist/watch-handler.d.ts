import type { IFileSystem, IWatchEvent } from '@file-services/types';
import type { Stylable } from '@stylable/core';
import type { StylableResolverCache } from '@stylable/core/dist/index-internal';
import type { BuildContext } from './types';
import { DirectoryProcessService } from './directory-process-service/directory-process-service';
import { Log } from './logger';
import { DiagnosticsManager } from './diagnostics-manager';
export interface WatchHandlerOptions {
    log?: Log;
    resolverCache?: StylableResolverCache;
    outputFiles?: BuildContext['outputFiles'];
    rootDir?: string;
    diagnosticsManager?: DiagnosticsManager;
}
export interface Build {
    service: DirectoryProcessService;
    identifier: string;
    stylable: Stylable;
}
export interface RegisteredBuild extends Build {
    generatedFiles: Set<string>;
}
export declare class WatchHandler {
    private fileSystem;
    private options;
    private builds;
    private resolverCache;
    private log;
    private diagnosticsManager;
    private generatedFiles;
    constructor(fileSystem: IFileSystem, options?: WatchHandlerOptions);
    readonly listener: (event: IWatchEvent) => Promise<void>;
    register({ generatedFiles, ...build }: RegisteredBuild): void;
    start(): void;
    stop(): Promise<void>;
    private invalidateCache;
}
//# sourceMappingURL=watch-handler.d.ts.map