import type { ImportSymbol } from './st-import';
import type { StylableMeta } from '../stylable-meta';
import type { StylableResolver, CSSResolve } from '../stylable-resolver';
export interface CSSVarSymbol {
    _kind: 'cssVar';
    name: string;
    global: boolean;
    alias: ImportSymbol | undefined;
}
export declare const diagnostics: {
    ILLEGAL_CSS_VAR_USE: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    ILLEGAL_CSS_VAR_ARGS: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    DEPRECATED_ST_GLOBAL_CUSTOM_PROPERTY: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    GLOBAL_CSS_VAR_MISSING_COMMA: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    ILLEGAL_GLOBAL_CSS_VAR: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_PROP_NAME: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNDEFINED_CSS_CUSTOM_PROP: {
        (name: any): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_REQUIRED_DESCRIPTOR: {
        (descriptorName: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_REQUIRED_INITIAL_VALUE_DESCRIPTOR: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    INVALID_DESCRIPTOR_TYPE: {
        (descriptorType: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    INVALID_DESCRIPTOR_NAME: {
        (descriptorName: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
};
export declare const hooks: import("./feature").FeatureHooks<{
    RESOLVED: Record<string, string>;
}>;
export declare function get(meta: StylableMeta, name: string): CSSVarSymbol | undefined;
export declare function getRuntimeTypedDefinitionNames(meta: StylableMeta): string[];
export declare function getTransformedName({ symbol, meta }: CSSResolve<CSSVarSymbol>): string;
export declare function scopeCSSVar(resolver: StylableResolver, meta: StylableMeta, symbolName: string): string;
//# sourceMappingURL=css-custom-property.d.ts.map