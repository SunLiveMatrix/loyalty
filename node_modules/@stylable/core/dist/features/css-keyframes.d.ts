import type { Imported } from './st-import';
import type { StylableMeta } from '../stylable-meta';
import type * as postcss from 'postcss';
export interface KeyframesSymbol {
    _kind: 'keyframes';
    alias: string;
    name: string;
    import?: Imported;
    global?: boolean;
}
export interface KeyframesResolve {
    meta: StylableMeta;
    symbol: KeyframesSymbol;
}
export declare const reservedKeyFrames: string[];
export declare const diagnostics: {
    ILLEGAL_KEYFRAMES_NESTING: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_KEYFRAMES_NAME: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    MISSING_KEYFRAMES_NAME_INSIDE_GLOBAL: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    KEYFRAME_NAME_RESERVED: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNKNOWN_IMPORTED_KEYFRAMES: {
        (name: string, path: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
};
export declare const hooks: import("./feature").FeatureHooks<{
    RESOLVED: Record<string, KeyframesResolve>;
}>;
export declare function getKeyframesStatements({ data }: StylableMeta): ReadonlyArray<postcss.AtRule>;
export declare function get(meta: StylableMeta, name: string): KeyframesSymbol | undefined;
export declare function getAll(meta: StylableMeta): Record<string, KeyframesSymbol>;
//# sourceMappingURL=css-keyframes.d.ts.map