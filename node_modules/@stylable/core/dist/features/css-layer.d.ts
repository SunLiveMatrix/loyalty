import * as STImport from './st-import';
import type { StylableMeta } from '../stylable-meta';
import type * as postcss from 'postcss';
export interface LayerSymbol {
    _kind: 'layer';
    name: string;
    alias: string;
    global?: boolean;
    import?: STImport.Imported;
}
export interface ResolvedLayer {
    meta: StylableMeta;
    symbol: LayerSymbol;
}
export declare const diagnostics: {
    MISSING_LAYER_NAME_INSIDE_GLOBAL: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    LAYER_SORT_STATEMENT_WITH_STYLE: {
        (): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    RESERVED_KEYWORD: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    NOT_IDENT: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    RECONFIGURE_IMPORTED: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
    UNKNOWN_IMPORTED_LAYER: {
        (name: string, path: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
};
export declare const hooks: import("./feature").FeatureHooks<{
    RESOLVED: Record<string, ResolvedLayer>;
}>;
export declare function get(meta: StylableMeta, name: string): LayerSymbol | undefined;
export declare function getAll(meta: StylableMeta): Record<string, LayerSymbol>;
export declare function getDefinition(meta: StylableMeta, name: string): postcss.AtRule | postcss.Rule | undefined;
//# sourceMappingURL=css-layer.d.ts.map