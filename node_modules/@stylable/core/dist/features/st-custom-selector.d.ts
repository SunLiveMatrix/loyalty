import * as postcss from 'postcss';
import { SelectorList } from '@tokey/css-selector-parser';
import type { StylableMeta } from '../stylable-meta';
import { Diagnostics } from '../diagnostics';
export declare const diagnostics: {
    UNKNOWN_CUSTOM_SELECTOR: {
        (selector: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("../diagnostics").DiagnosticSeverity;
    };
};
export declare const CUSTOM_SELECTOR_RE: RegExp;
export declare const hooks: import("./feature").FeatureHooks<import("./feature").NodeTypes>;
export declare function isScoped(meta: StylableMeta, name: string): boolean;
export declare function getCustomSelector(meta: StylableMeta, name: string): SelectorList | undefined;
export declare function getCustomSelectors(meta: StylableMeta): Record<string, SelectorList>;
export declare function getCustomSelectorExpended(meta: StylableMeta, name: string): string | undefined;
export declare function getCustomSelectorNames(meta: StylableMeta): string[];
export declare function transformCustomSelectorInline(meta: StylableMeta, selector: string, options?: {
    diagnostics?: Diagnostics;
    node?: postcss.Node;
}): string;
//# sourceMappingURL=st-custom-selector.d.ts.map