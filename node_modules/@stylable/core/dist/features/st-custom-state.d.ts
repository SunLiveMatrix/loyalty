import { parsePseudoStates, parseStateValue, transformPseudoClassToCustomState, createBooleanStateClassName, createStateWithParamClassName, systemValidators, validationErrors as sysValidationErrors, resolveStateParam, isTemplateState, MappedStates } from '../helpers/custom-state';
export interface HasStates {
    '-st-states': MappedStates;
}
export declare const diagnostics: {
    MISSING_TYPE_OR_TEMPLATE: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    UNKNOWN_STATE_TYPE: {
        (name: string, type: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    TOO_MANY_STATE_TYPES: {
        (name: string, types: string[]): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    NO_STATE_TYPE_GIVEN: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    TOO_MANY_ARGS_IN_VALIDATOR: {
        (name: string, validator: string, args: string[]): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    STATE_STARTS_WITH_HYPHEN: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    RESERVED_NATIVE_STATE: {
        (name: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    DEFAULT_PARAM_FAILS_VALIDATION: {
        (stateName: string, defaultValue: string, errors: string[]): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    NO_STATE_ARGUMENT_GIVEN: {
        (name: string, type: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    FAILED_STATE_VALIDATION: {
        (name: string, actualParam: string, errors: string[]): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    TEMPLATE_MISSING_PLACEHOLDER: {
        (state: string, template: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    TEMPLATE_MULTI_PARAMETERS: {
        (state: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    TEMPLATE_MISSING_PARAMETER: {
        (state: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    UNSUPPORTED_MULTI_SELECTOR: {
        (state: string, finalSelector: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    UNSUPPORTED_COMPLEX_SELECTOR: {
        (state: string, finalSelector: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    INVALID_SELECTOR: {
        (state: string, finalSelector: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    UNSUPPORTED_INITIAL_SELECTOR: {
        (state: string, finalSelector: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
    NO_PARAM_REQUIRED: {
        (name: string, param: string): import("../diagnostics").DiagnosticBase;
        code: string;
        severity: import("..").DiagnosticSeverity;
    };
};
export declare const hooks: import("./feature").FeatureHooks<import("./feature").NodeTypes>;
declare const delimiters: {
    booleanStateDelimiter: string;
    stateMiddleDelimiter: string;
    stateWithParamDelimiter: string;
};
export { parsePseudoStates, parseStateValue, transformPseudoClassToCustomState, delimiters, createBooleanStateClassName, createStateWithParamClassName, systemValidators, sysValidationErrors, resolveStateParam, isTemplateState, MappedStates, };
//# sourceMappingURL=st-custom-state.d.ts.map