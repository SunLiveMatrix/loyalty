import { Descriptors, Token } from '@tokey/core';
type Delimiters = ':' | ';' | '*' | '/' | '.' | ',' | '(' | ')' | '{' | '}' | '>' | '=' | '<' | '|' | '?' | '[' | ']' | '+' | '-' | '~' | '^' | '&' | '%' | '!' | '\n';
export type DTSCodeToken = Token<Descriptors | Delimiters>;
export declare function tokenizeDTS(source: string): TokenizedDtsEntry[];
export declare function getLocalClassStates(local: string, tokens: TokenizedDtsEntry[]): ClassStateToken[];
export type TokenizedDtsEntry = ClassesToken | VarsToken | StVarsToken | KeyframesToken | LayersToken | ContainersToken | StatesToken;
export type RelevantKeys = 'classes' | 'vars' | 'stVars' | 'keyframes' | 'layers' | 'containers';
export interface DtsToken extends DTSCodeToken {
    line: number;
    column: number;
    outputValue?: DtsToken;
}
export type ClassStateToken = {
    stateName: DtsToken;
    type: DtsToken[];
};
export type ClassesToken = {
    type: 'classes';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type VarsToken = {
    type: 'vars';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type StVarsToken = {
    type: 'stVars';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type KeyframesToken = {
    type: 'keyframes';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type LayersToken = {
    type: 'layers';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type ContainersToken = {
    type: 'containers';
    tokens: DtsToken[];
    start: number;
    end: number;
};
export type StatesToken = {
    type: 'states';
    tokens: {
        className: DtsToken;
        classStates: ClassStateToken[];
    }[];
    start: number;
    end: number;
};
export {};
//# sourceMappingURL=dts-rough-tokenizer.d.ts.map