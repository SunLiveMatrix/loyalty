"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const common_1 = require("./common");
const node_1 = __importDefault(require("@file-services/node"));
const module_utils_1 = require("@stylable/module-utils");
const build_tools_1 = require("@stylable/build-tools");
const resolve_namespace_1 = require("./resolve-namespace");
const url_1 = require("url");
let createModule;
async function generateJsModule(sheetSource, filePath) {
    if (!createModule) {
        createModule = await initiateModuleFactory();
    }
    return createModule(sheetSource, filePath);
}
async function initiateModuleFactory() {
    const defaultConfig = await (0, build_tools_1.loadStylableConfigEsm)(process.cwd(), (potentialConfigModule) => potentialConfigModule.defaultConfig?.(node_1.default));
    return (0, module_utils_1.stylableModuleFactory)({
        resolveNamespace: resolve_namespace_1.resolveNamespace,
        ...(defaultConfig?.config || {}),
        projectRoot: '/',
        fileSystem: node_1.default,
        resolverCache: new Map(),
    }, {
        moduleType: 'esm',
        // point to cjs - the esm runtime isn't published with mjs
        // and causes issues. currently it's problematic for direct esm
        // usage and only works for bundlers.
        runtimePath: '@stylable/runtime/dist/pure.js',
    });
}
async function load(url, context, next) {
    if ((0, common_1.defaultStylableMatcher)(url)) {
        const filePath = (0, url_1.fileURLToPath)(url);
        const sheetSource = node_1.default.readFileSync(filePath, { encoding: 'utf-8' });
        const moduleSource = await generateJsModule(sheetSource, filePath);
        return {
            shortCircuit: true,
            format: 'module',
            source: moduleSource,
        };
    }
    // Defer to the next hook in the chain
    return next(url, context);
}
exports.load = load;
//# sourceMappingURL=loader.js.map