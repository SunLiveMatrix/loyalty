"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachHook = void 0;
const index_internal_1 = require("@stylable/core/dist/index-internal");
const module_utils_1 = require("@stylable/module-utils");
const fs_1 = __importDefault(require("fs"));
const common_1 = require("./common");
const resolve_namespace_1 = require("./resolve-namespace");
const HOOK_EXTENSION = '.css';
function attachHook({ matcher, afterCompile, stylableConfig, runtimePath, ignoreJSModules, configPath, } = {}) {
    let options = {
        ...stylableConfig,
    };
    try {
        if (configPath) {
            const { defaultConfig } = require(configPath);
            const defaultConfigObj = defaultConfig(fs_1.default);
            (0, index_internal_1.validateDefaultConfig)(defaultConfigObj);
            options = { ...defaultConfigObj, ...options };
        }
    }
    catch (e) {
        throw new Error(`Failed to load Stylable config from ${configPath}:\n${e}`);
    }
    const stylableToModule = (0, module_utils_1.stylableModuleFactory)({
        projectRoot: 'root',
        fileSystem: fs_1.default,
        requireModule: require,
        resolveNamespace: resolve_namespace_1.resolveNamespace,
        resolverCache: new Map(),
        ...options,
    }, { runtimePath });
    if (!matcher) {
        matcher = common_1.defaultStylableMatcher;
    }
    const prevHook = require.extensions[HOOK_EXTENSION];
    require.extensions[HOOK_EXTENSION] = function cssModulesHook(m, filename) {
        if (matcher(filename) || !prevHook) {
            const useJSModule = !ignoreJSModules && fs_1.default.existsSync(filename + '.js');
            const source = fs_1.default.readFileSync(useJSModule ? filename + '.js' : filename).toString();
            const code = useJSModule ? source : stylableToModule(source, filename);
            return m._compile(afterCompile ? afterCompile(code, filename) : code, filename);
        }
        else if (prevHook) {
            return prevHook(m, filename);
        }
        else {
            throw new Error(`Failed to load file: ${filename}. Could not find require extension for .css`);
        }
    };
}
exports.attachHook = attachHook;
//# sourceMappingURL=require-hook.js.map