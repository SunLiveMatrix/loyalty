import type { StylableResults } from '@stylable/core';
import { IStylableOptimizer, OptimizeConfig, StylableExports } from '@stylable/core/dist/index-internal';
import postcss, { Root, Node } from 'postcss';
import { NameMapper } from './name-mapper';
export declare class StylableOptimizer implements IStylableOptimizer {
    names: NameMapper;
    classPrefix: string;
    namespacePrefix: string;
    minifyCSS(css: string): string;
    optimize(config: OptimizeConfig, stylableResults: StylableResults, usageMapping: Record<string, boolean>): void;
    getNamespace(namespace: string): string;
    getClassName(className: string): string;
    optimizeAst(config: OptimizeConfig, targetAst: Root, usageMapping: Record<string, boolean>, jsExports: StylableExports, globals: Record<string, boolean>): void;
    optimizeAstAndExports(ast: Root, exported: Record<string, string>, classes: string[] | undefined, usageMapping: Record<string, boolean>, globals?: Record<string, boolean>, shortNamespaces?: boolean, classNamespaceOptimizations?: boolean): void;
    protected rewriteSelector(selector: string, usageMapping: Record<string, boolean>, globals: Record<string, boolean> | undefined, shortNamespaces: boolean, classNamespaceOptimizations: boolean): string;
    private removeEmptyNodes;
    private removeComments;
    private removeUnusedComponents;
    private isContainsUnusedParts;
}
export declare function removeCommentNodes(root: Root): void;
export declare function removeEmptyNodes(root: Root): void;
export declare function createCommentFromNode(label: string, node: Node): postcss.Comment[];
export declare function createLineByLineComment(node: Node): postcss.Comment[];
export declare function removeRecursiveUpIfEmpty(node: Node): void;
export declare function replaceRecursiveUpIfEmpty(label: string, node: Node): void;
//# sourceMappingURL=stylable-optimizer.d.ts.map