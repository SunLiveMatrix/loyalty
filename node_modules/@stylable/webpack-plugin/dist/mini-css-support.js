"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectCssModules = void 0;
const plugin_utils_1 = require("./plugin-utils");
const plugin_1 = require("./plugin");
function injectCssModules(webpack, compilation, staticPublicPath, stylableModules, assetsModules) {
    const MiniCssExtractPlugin = compilation.options.plugins.find((plugin) => plugin?.constructor?.name === 'MiniCssExtractPlugin');
    if (!MiniCssExtractPlugin) {
        throw new Error('StylableWebpackPlugin cannot find "MiniCssExtractPlugin" in the compilation plugin list');
    }
    const CssModule = MiniCssExtractPlugin.constructor.getCssModule(webpack);
    compilation.hooks.afterChunks.tap(plugin_1.StylableWebpackPlugin.name, () => {
        const { moduleGraph, dependencyTemplates, runtimeTemplate } = compilation;
        const chunkGraph = compilation.chunkGraph;
        for (const [module] of stylableModules) {
            const cssModule = new CssModule({
                context: module.context,
                identifier: module.resource.replace(/\.st\.css$/, '.css') + '?stylable-css-inject',
                identifierIndex: 1,
                content: Buffer.from((0, plugin_utils_1.replaceMappedCSSAssetPlaceholders)({
                    assetsModules,
                    staticPublicPath,
                    chunkGraph,
                    moduleGraph,
                    dependencyTemplates,
                    runtime: 'CSS' /*runtime*/,
                    runtimeTemplate,
                    stylableBuildData: (0, plugin_utils_1.getStylableBuildData)(stylableModules, module),
                })),
            });
            try {
                let syncCheck = false;
                cssModule.build(compilation.options, compilation, compilation.resolverFactory.get('normal'), compilation.compiler.inputFileSystem, () => (syncCheck = true));
                if (!syncCheck) {
                    throw new Error('Expect CssModule build to be sync');
                }
            }
            catch (e) {
                throw new Error('CssModule build failed inside Stylable integration with Error:\n' +
                    e?.message);
            }
            compilation.modules.add(cssModule);
            for (const chunk of chunkGraph.getModuleChunksIterable(module)) {
                const [chunkGroup] = chunk.groupsIterable;
                chunkGraph.connectChunkAndModule(chunk, cssModule);
                chunkGroup.setModulePostOrderIndex(cssModule, (0, plugin_utils_1.getStylableBuildMeta)(module).depth);
            }
        }
    });
}
exports.injectCssModules = injectCssModules;
//# sourceMappingURL=mini-css-support.js.map