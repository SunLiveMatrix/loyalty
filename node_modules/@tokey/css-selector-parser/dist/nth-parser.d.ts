import type { CSSSelectorToken } from './tokenizer';
import type { Nth } from './ast-types';
import { Seeker } from '@tokey/core';
export declare class NthParser {
    private selectorNode;
    private s;
    static isNthPseudoClass(name: string): boolean;
    /**
     * check (case insensitive) and returns 2 groups:
     * 1. plus/minus sign (invalid step value)
     * 2. odd/even string
     * [
     *  `+`|`-`|undefined,
     *  `odd`|`even`
     * ]
     */
    static oddEvenStep: RegExp;
    /**
     * check for valid step
     * starts with optional minus or plus,
     * ends with 0 or more digits following a `n`/`N` character
     */
    static validStep: RegExp;
    /**
     * check for valid offset
     * starts with optional minus or plus,
     * ends with 1 or more digits
     */
    static validOffset: RegExp;
    /**
     * check for valid start of nth expression
     * and returns 2 groups:
     * 1. An: optional minus or plus, 0 or more digits, `n`/`N` character
     * 2. anything after that
     */
    static nthStartExp: RegExp;
    state: 'step' | `dash` | `offset` | `of` | `selector`;
    private standaloneDash;
    private ast;
    constructor(selectorNode: Nth, s: Seeker<CSSSelectorToken>);
    handleToken(token: CSSSelectorToken): boolean;
    /**
     * first token can only be (minus contained in text):
     * step: `5n`/`+5n`/`-5n`
     * step & offset: `5n`/`5n-5
     */
    private breakFirstChunk;
    private pushStep;
    private pushDash;
    private pushOffset;
    private pushOf;
}
//# sourceMappingURL=nth-parser.d.ts.map