import type { lengthValidUnits, angleValidUnits, frequencyValidUnits, resolutionValidUnits, timeValidUnits } from './units';
export interface CSSValueAST<TYPE extends string> {
    type: TYPE;
    start: number;
    end: number;
    value: string;
}
export type BaseAstNode = Literal | CssWideKeyword | Space | Comment | Invalid | CustomIdent | DashedIdent | Call | String | Number | Integer | Length | Angle | Time | Percentage | Frequency | Resolution | Flex | UnknownUnit | Color;
export type BuildVarAst = CSSValueAST<`build-var`> & {
    subType: string;
    id: string;
};
export type Literal = CSSValueAST<`literal`> & {
    before: string;
    after: string;
};
export type CssWideKeyword = CSSValueAST<`css-wide-keyword`> & {
    value: AnyCase<`inherit` | `unset` | `initial`>;
};
export type Space = CSSValueAST<`space`> & {
    before: string;
    after: string;
};
export type Comment = CSSValueAST<`comment`> & {
    before: string;
    after: string;
};
export type Call<TYPE extends string = 'call'> = CSSValueAST<TYPE> & {
    args: CSSValueAST<any>[];
    before: string;
    after: string;
};
type Unit<TYPE extends string, UNIT extends string> = CSSValueAST<TYPE> & {
    unit: UNIT;
    integer: boolean;
};
export type Invalid = CSSValueAST<`invalid`>;
export type UnknownUnit = Unit<`unknown-unit`, string>;
export type CustomIdent = CSSValueAST<`<custom-ident>`>;
export type DashedIdent = CSSValueAST<`<dashed-ident>`>;
export type String = CSSValueAST<`<string>`>;
export type Url = CSSValueAST<`<url>`>;
export type Integer = CSSValueAST<`<integer>`>;
export type Number = CSSValueAST<`<number>`>;
export type Percentage = Unit<`<percentage>`, `%`>;
export type Ratio = CSSValueAST<`<ratio>`>;
export type Length = Unit<`<length>`, AnyCase<(typeof lengthValidUnits)[number]>>;
export type Flex = Unit<`<flex>`, AnyCase<`fr`>>;
export type Angle = Unit<`<angle>`, AnyCase<(typeof angleValidUnits)[number]>>;
export type Time = Unit<`<time>`, AnyCase<(typeof timeValidUnits)[number]>>;
export type Frequency = Unit<`<frequency>`, AnyCase<(typeof frequencyValidUnits)[number]>>;
export type Resolution = Unit<`<resolution>`, AnyCase<(typeof resolutionValidUnits)[number]>>;
export type Color = CSSValueAST<`<color>`>;
export type Image = CSSValueAST<`<image>`>;
export type Position = CSSValueAST<`<position>`>;
export type Attribute = CSSValueAST<`<attr()>`>;
type AnyCase<T extends string> = string extends T ? string : T extends `${infer F1}${infer F2}${infer R}` ? `${Uppercase<F1> | Lowercase<F1>}${Uppercase<F2> | Lowercase<F2>}${AnyCase<R>}` : T extends `${infer F}${infer R}` ? `${Uppercase<F> | Lowercase<F>}${AnyCase<R>}` : '';
export declare const invalid: (value: Partial<Invalid>) => Invalid;
export declare const literal: (value: Partial<Literal>) => Literal;
export declare const cssWideKeyword: (value: Partial<CssWideKeyword>) => CssWideKeyword;
export declare const space: (value: Partial<Space>) => Space;
export declare const comment: (value: Partial<Comment>) => Comment;
export declare const customIdent: (value: Partial<CustomIdent>) => CustomIdent;
export declare const dashedIdent: (value: Partial<DashedIdent>) => DashedIdent;
export declare const string: (value: Partial<String>) => String;
export declare const integer: (value: Partial<Integer>) => Integer;
export declare const number: (value: Partial<Number>) => Number;
export declare const unknownUnit: (value: Partial<UnknownUnit>) => UnknownUnit;
export declare const length: (value: Partial<Length> & Pick<Length, 'unit'>) => Length;
export declare const angle: (value: Partial<Angle> & Pick<Angle, 'unit'>) => Angle;
export declare const percentage: (value: Partial<Percentage>) => Percentage;
export declare const flex: (value: Partial<Flex>) => Flex;
export declare const time: (value: Partial<Time> & Pick<Time, 'unit'>) => Time;
export declare const frequency: (value: Partial<Frequency> & Pick<Frequency, 'unit'>) => Frequency;
export declare const resolution: (value: Partial<Resolution> & Pick<Resolution, 'unit'>) => Resolution;
export declare const call: (value: Partial<Call>) => Call;
export declare const color: (value: Partial<Color>) => Color;
export {};
//# sourceMappingURL=ast-types.d.ts.map