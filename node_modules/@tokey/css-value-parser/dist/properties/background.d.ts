export declare const background: {
    validate: (ast: import("..").CSSValueAST<any>[], options?: import("../define-property").ActionParams | undefined) => string[];
    getFormat: (ast: import("..").CSSValueAST<any>[], options?: import("../define-property").ActionParams | undefined) => string;
    classify: (ast: import("..").CSSValueAST<any>[], options?: (import("../define-property").ActionParams & {
        deep?: boolean | undefined;
        ignoreComments?: boolean | undefined;
    }) | undefined) => Record<"background-image" | "background-position" | "background-size" | "background-repeat" | "background-origin" | "background-clip" | "background-attachment" | "background-color", {
        value: import("..").CSSValueAST<any>[];
        resolved: {
            origin: import("../value-parser").ParseResults;
            nodes: import("..").CSSValueAST<any>[];
        }[][];
        isProperty: boolean;
    }>[];
};
//# sourceMappingURL=background.d.ts.map