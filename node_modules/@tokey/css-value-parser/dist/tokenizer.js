"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenizeValue = void 0;
const core_1 = require("@tokey/core");
function tokenizeValue(source, options = {}) {
    const parseLineComments = false; // why would that be a choice?
    return (0, core_1.tokenize)(source, {
        isDelimiter,
        isStringDelimiter(char, previousChar) {
            return previousChar !== `\\` && (0, core_1.isStringDelimiter)(char);
        },
        isWhitespace: core_1.isWhitespace,
        shouldAddToken: () => true,
        createToken: core_1.createToken,
        getCommentStartType: parseLineComments
            ? core_1.getJSCommentStartType
            : core_1.getMultilineCommentStartType,
        isCommentEnd: core_1.isCommentEnd,
        getUnclosedComment: core_1.getUnclosedComment,
        shouldClose(ch, previousChar) {
            if ((0, core_1.isWhitespace)(ch) && (0, core_1.isWhitespace)(previousChar)) {
                return false;
            }
            if (previousChar === '\\') {
                return false;
            }
            const isAllowedChars = /[-_a-zA-Z0-9]/.test(ch);
            if (isAllowedChars) {
                return false;
            }
            // match css identifier char don't allow non-ascii chars
            return ch.charCodeAt(0) <= 127;
        },
        offset: options.offset,
    });
}
exports.tokenizeValue = tokenizeValue;
const isDelimiter = (char, previousChar) => previousChar !== '\\' &&
    (char === '(' ||
        char === ')' ||
        char === '[' ||
        char === ']' ||
        char === '<' ||
        char === '>' ||
        char === '{' ||
        char === '}' ||
        char === '@' ||
        char === '|' ||
        char === ':' ||
        char === ';' ||
        char === '~' ||
        char === '&' ||
        char === ',' ||
        char === '/' ||
        char === '+' ||
        char === '-' ||
        char === '*' ||
        char === '#' ||
        char === '%' ||
        char === '.');
//# sourceMappingURL=tokenizer.js.map